<!doctype debiandoc SYSTEM>

<book>
<title> The Hackers Guide for <tt>console-setup</tt> </title>
<author>
	<name>Anton Zinoviev</name><email>anton@lml.bas.bg</email>
</author>

<copyright>
<copyrightsummary> &copy;&nbsp;2005 Anton Zinoviev </copyrightsummary>

<p> This manual is free software; you may redistribute it and/or
modify it under the terms of the GNU General Public License as
published by the Free Software Foundation; either version&nbsp;2, or
(at your option) any later version.

<p> This is distributed in the hope that it will be useful, but
<em>without any warranty</em>; without even the implied warranty of
merchantability or fitness for a particular purpose.  See the GNU
General Public License for more details.
    
<p> A copy of the GNU General Public License is available as
<tt>/usr/share/common-licenses/GPL</tt> in the Debian GNU/Linux
distribution or on the World Wide Web at the <url
id="http://www.gnu.org/copyleft/gpl.html" name="GNU website">. You can
also obtain it by writing to the Free Software Foundation, Inc.,
51 Franklin St, Fifth Floor, Boston, MA  02110-1301, USA.

</copyright>
      
<toc>
    
<chapt> Basic Structure

<p> The main directory of the package contains a very simple
<file>Makefile</file> &mdash; its main purpose is to invoke the
sub-<file>Makefile</file>s in the directories <file>Fonts</file> and
<file>Keyboard</file>.

<p> The main directory contains the utility
<prgn>describe_unicodes</prgn>.  This utility is never invoked
automatically.  Its purpose is to make files containing many Unicodes
more human-readable.  The following transcript illustrates its usage:

<example>
$ cat foo
U+FFFD U+003F
U+2015 U+2014
U+02C9 U+00AF
$ ./describe_unicodes foo
$ cat foo
U+FFFD U+003F
# U+FFFD:   REPLACEMENT CHARACTER
# U+003F:   QUESTION MARK
U+2015 U+2014
# U+2015:   HORIZONTAL BAR
# U+2014:   EM DASH
U+02C9 U+00AF
# U+02C9:   MODIFIER LETTER MACRON
# U+00AF:   MACRON
</example>

This utility is idempotent, i.e. you can use it as many times as
necessary on one and the same file in order to update the comments.

<chapt>Fonts

<p> Only 256 (or 512) glyphs can be used in the console fonts.  Because
of that it is impossible to use one universal font suitable for all
languages.  So we have to support different font collections for the
different languages.

<p> Maintaining many different font collections has some obious
disadvantages.  First, the look of the console will depend on the
character set.  Second, it is difficult to follow the quality and the
purpose of so many different fonts.  The solution is to maintain
common fonts in BDF format for all languages and translate them to
many fonts in PSF format for the different code sets.

<p>The traditionally used font collection for the Linux console is a
demonstration for the big mess.  There are many different fonts and
nobody in the world knew the exact purpose of all of them.  During the
years new fonts were added, but old were almost newer removed.

<p>Some of the fonts shared common typeface, i.e. they were
differently encoded but the common glyphs were equal.  In total,
however, there were too many different typefaces that generally differ
one from another only a little.

<sect><prgn>bdf2psf</prgn>

<p>The program <prgn>bdf2psf</prgn> translates BDF fonts to PSF
format.  It accepts fonts with arbitrary size of the font matrix.  If
the width of matrix of the source font is 7 or 9 pixels then it
generates fonts with width of 8 pixels.

<sect1>Synopsis

<p>
<example>
bdf2psf [--fb][--log <var>LOG</var>] <var>BDF</var>{+<var>BDF</var>} <var>EQUIV</var>{+<var>EQUIV</var>} <var>SYMB</var>{+[:]<var>SYMB</var>} <var>SIZE</var> <var>PSF</var> [<var>SFM</var>]
</example>

<p>Description of the options:

<taglist>

<tag><tt>--fb</tt>

<item> Generate fonts for the framebuffer.  There are two important
differences between the framebuffer and the text mode.  First, all
fonts in text mode have to have matrix 8 pixels width.  They also have
to have either 256 or 512 glyphs.  Second, in some text modes the
hardware does some magic in order to use 8 pixels width fonts as if
they were 9 pixels width.  In order to achieve this the video hardware
copyes the 8th column in the 9th columnt of the glyphs with codes from
0xC0 to 0xDF and from 0x1C0 to 0x1DF.  <prgn>Bdf2psf</prgn> is very
careful when deciding where to place a particular glyph and as a
result the encoding of the generated font is more or less arbitrary.

<tag><tt>--log <var>LOG</var></tt>

<item> Record in the file <file><var>LOG</var></file> any problems
during the conversion.

<tag><tt><var>BDF</var>{+<var>BDF</var>}</tt>

<item> The source BDF font(s).  When a particular symbol is defined in
more than one of the specified fonts then the first listed fonts take
precedence.

<tag><tt><var>EQUIV</var>{+<var>EQUIV</var>}</tt>

<item> A list of files defining an equivalence relation between the
glyphs.  See <ref id="equivalence">.

<tag><tt><var>SYMB</var>{+[:]<var>SYMB</var>}</tt>

<item> Generate PSF font for the character set described in the file
<prgn><var>SYMB</var></prgn>.  If more than one character set is
specified the PSF font will support all of them.  See <ref
id="charsets">.

<tag> <tt><var>SIZE</var></tt>

<item> The size of the PSF font.  Usually 256 or 512 glyphs.

<tag> <tt><var>PSF</var></tt>

<item> <prgn><var>PSF</var></prgn> is the name of the generated PSF
font.  If a file with this name already exists it will be
overwritten.

<tag>  <tt><var>SFM</var></tt>

<item> Save in the file <prgn><var>SFM</var></prgn> the SFM of the
generated font.  This parameter is optional.

</taglist>

<sect1 id="charsets"> Character Sets

<p> The encoding of the traditional console fonts follows the standard
encoding of the different languages.  For example there are fonts for
all variants of ISO 8859.  This is redundand, for example ISO 8859-1,
ISO 8859-9 and ISO 8859-15 differ only by few characters.

<p> In order to determine the minimal set of character sets a
clustering algorithm was used.  The source code of <url
id="http://proba" name="fontconfig"> contains lists of the characters
that most languages require&mdash;one list per language.  We started
with one character set per language and used the clustering algorithm
in order to join the character sets to bigger.  The following
character sets were the result of the algorithm:

<taglist>

<tag> <file>Arabic</file> (512 glyphs)

<item> For Arabic, Kurdish in Iran, Pashto, Persian and Urdu.

<tag> <file>Armenian</file>

<item> For Armenian.

<tag> <file>CyrAsia</file>

<item> Suitable for some of the non-Slavic Cyrillic languages -
   Abkhazia, Avaric, Azerbaijani, Bashkir, Buryat, Chechen, Chuvash,
   Inupiaq (Eskimo), Kara-Kalpak, Kazakh, Kirgiz, Komi, Kumyk,
   Kurdish, Lezghian, Mari (Cheremis), Mongolian, Ossetic, Selkup
   (Ostyak- Samoyed), Tajik, Tatar, Turkmen, Tuvinian, Uzbek and
   Yakut.

<tag> <file>CyrKoi</file>

<item> Covers entirely KOI8-R and KOI8-U.  Suitable for Russian and
   Ukrainian.

<tag> <file>CyrSlav</file>

<item> Covers entirely ISO-8859-5 and CP1251.  Suitable for the Slavic
   Cyrillic languages - Belarusian, Bulgarian, Macedonian, Russian,
   Serbian and Ukrainian.  For Serbian both the Cyrillic and the Latin
   alphabets are supported.

<tag> <file>Ethiopian</file> (512 glyphs)

<item> For Amharic, Ethiopic (Geez), Tigre and Tigrinya.

<tag> <file>Georgian</file>

<item> For Georgian.

<tag> <file>Greek</file>

<item> For Greek.

<tag> <file>Hebrew</file>

<item> For Hebrew and Yiddish.

<tag> <file>Lao</file>

<item> For Lao.

<tag> <file>Lat15</file>

<item> Covers entirely ISO-8859-1, ISO-8859-9 and ISO-8859-15.
   Suitable for the so called Latin1 and Latin5 languages - Afar,
   Afrikaans, Albanian, Aragonese, Asturian, Aymara, Basque, Bislama,
   Breton, Chamorro, Danish, Dutch, English, Estonian, Faroese,
   Fijian, Finnish, French, Frisian, Friulian, Galician, German, Hiri
   Motu, Icelandic, Ido, Indonesian, Interlingua, Interlingue,
   Italian, Low Saxon, Lule Sami, Luxembourgish, Malagasy, Manx
   Gaelic, Norwegian Bokmal, Norwegian Nynorsk, Occitan, Oromo or
   Galla, Portuguese, Rhaeto-Romance (Romansch), Scots Gaelic, Somali,
   South Sami, Spanish, Swahili, Swedish, Tswana, Turkish, Volapuk,
   Votic, Walloon, Xhosa, Yapese and Zulu.

<tag> <file>Lat2</file>

<item> Covers entirely ISO-8859-2.  The Euro sign and the Romanian
   letters with comma below are also supported.  Suitable for the so
   called Latin2 languages - Bosnian, Croatian, Czech, Hungarian,
   Polish, Romanian, Slovak, Slovenian and Sorbian (lower and upper).

<tag> <file>Lat38</file>

<item> Covers entirely ISO-8859-3 and ISO-8859-14.  Suitable for
   Chichewa Esperanto, Irish, Maltese and Welsh.

<tag> <file>Lat7</file>

<item> Covers entirely ISO-8859-13.  Suitable for Lithuanian, Latvian,
   Maori and Marshallese.

<tag> <file>Thai</file>

<item> For Thai.

<tag> <file>Uni1</file> (512 glyphs)

<item> Supports most of the Latin languages, the Slavic Cyrillic
   languages, Hebrew and barely Arabic.

<tag> <file>Uni2</file> (512 glyphs)

<item> Supports most of the Latin languages, the Slavic Cyrillic
   languages and Greek.

<tag> <file>Uni3</file> (512 glyphs)

<item> Supports most of the Latin and Cyrillic languages.

<tag> <file>Vietnamese</file> (512 glyphs)

<item> For Vietnamese

</taglist>

<p> These character sets are described in files in the directory
<file>Fonts/fontsets</file>.  These files list the unicodes of the
symbols of the character set, one per line.  Comments starting with a
sharp sign are also allowed.

<sect1 id="equivalence">Equivalence files

<p> The equivalence files define an equivalence relation between
unicodes.  The sharp sign is used for comments, the empty lines are
ignored.  All other lines should list two or more unicodes.  Only one
glyph will be allocated in the PSF font for these unicodes.

<p> Example:
<example>
U+2126 U+03A9
# U+2126:   OHM SIGN
# U+03A9:   GREEK CAPITAL LETTER OMEGA
U+041D U+0048
# U+041D:   CYRILLIC CAPITAL LETTER EN
# U+0048:   LATIN CAPITAL LETTER H
</example>

This equivalence file says that U+2126 (the Ohm sign) and U+03A9
(Omega) have the same look so only one glyph is enough for them.  And
also U+041D (Cyrillic En) and U+0048 (Latin H) look the same.

<p> Two equivalence files are
used&mdash;<file>standard.equivalents</file> and
<file>arabic.equivalents</file>.  The first is used for all fonts.
The second is used only for the fonts with character set Uni1, its
purpose is to reduce the number of the necessary glyphs for the Arabic
letters at the cost of the font quality.

</book>

<!-- Local variables: -->
<!-- coding: iso-8859-1 -->
<!-- End: -->
