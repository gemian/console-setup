#!/bin/bash

#     Copyright Â© 2005 Anton Zinoviev <anton@lml.bas.bg>

#     This program is free software; you can redistribute it and/or modify
#     it under the terms of the GNU General Public License as published by
#     the Free Software Foundation; either version 2 of the License, or
#     (at your option) any later version.

#     This program is distributed in the hope that it will be useful,
#     but WITHOUT ANY WARRANTY; without even the implied warranty of
#     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#     GNU General Public License for more details.

#     If you have not received a copy of the GNU General Public License
#     along with this program, write to the Free Software Foundation, Inc.,
#     59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

#                        ----------
#                         CONTENTS
#                        ----------
#
# 1. Initialise $fontsets, $charmaps and $kbdnames with the supported
#    fontsets, charmaps, keyboard models, layouts and variants.  These
#    lists can not be computed because the config script is invoked
#    during the preconfiguration phase and the available fonts, ACM,
#    etc. are not yet unpacked.
#
# 2. Function ask_debconf.  Ask user to choose amongst the options
#    listed in $fontsets, $charmaps and $kbdnames.
#
# 3. Function guess_arch - detect the architecture and subarchitecture
#
# 4. Function available_fontsets - lists all fontfaces that can be
#    used with $codeset.
#
# 5. Function available_fontsizes - lists all font sizes that can be
#    used with the $codeset-$fontface combination.
#
# 6. Set $locale.  Set $default_codeset and $codeset_priority acording
#    to $locale.
#
# 7. Set $default_layout and acording to $locale. default_variant=''
#
# 8. Set $default_charmap and $charmap_priority acording to $locale.
#
# 9. Set $arch.  Set $default_model and $model_priority acording to
#    $arch.
#
# 10. Read /etc/default/console-setup and store values into debconf
#     db.  Four very long case instructions in order to translate
#     options like "grp:caps_toggle" to human-readable strings like
#     "Caps Lock".
#
# 11. Ask the Debconf questions starting from STATE=1 and ending after
#     STATE=9.  Again four long case instructions in STATE=4 to
#     translate "Caps Lock" to "grp:caps_toggle".

# This script would be simpler and faster if written in Perl but with
# Shell it can be used in the Installer

set -e

. /usr/share/debconf/confmodule

## FONTSETS ## Will be replaced by assignment for $fontsets:

# fontsets='Arabic-Fixed15
# Arabic-Fixed16
# Arabic-vga14
# ... 
# Vietnamese-Fixed18
# '

## CHARMAPS ## Will be replaced by assignment for $charmaps:

# charmaps='ARMSCII-8
# CP1251
# CP1255
# ...
# UTF-8'

## KBDNAMES ## Will be replaced by assignment for $kbdnames:

# kbdnames='model*logicdp*Logitech Cordless Desktop Pro
# model*omnikey101*Northgate OmniKey 101
# ...
# layout*el*Greek
# ...
# variant*it*nodeadkeys*Eliminate dead keys'

db_capb backup

# A high level function to ask questions about the keyboard model,
# layout and variant
ask_debconf () {
    local template priority prefix default_code default_description choices

    template=$1     # The template to ask
    priority=$2     # The priority for the question
    prefix=$3       # The prefix for $kbdnames
    default_code=$4 # The default choice (optional)

    choices=`echo "$kbdnames" | grep "^$prefix\*" | 
        sed -e "s/^$prefix\*[^\*]*\*//" -e 's/,//g' -e 's/$/,/' | sort `
    choices=`echo $choices | sed 's/, *$//'`

    db_subst $template CHOICES "$choices"
    default_description=`echo "$kbdnames" |  
        grep "^$prefix\*${default_code}\*" |
        sed -e "s/^$prefix\*${default_code}\*//"`
    if [ -n "$default_description" ]; then
	db_set $template "$default_description"
    fi

    db_input $priority $template || true
    db_go || return 255
    db_get $template
    RET=`echo "$kbdnames" | grep "^$prefix\*[^\*]*\*" |
             sed 's/  */ /g' |
             grep "\*$RET\$" |
             sed -e "s/^$prefix\*\([^\*]*\)\*.*/\1/" `
    return 0
}

# The guess arch code is taken from "console-data.conf"
# (translated from Perl to shell)
# TODO: use archdetect instead.

# SUBARCH	KEYMAP SET	DETECTION
# m68k/atari	atari		"Model: Atari"
# m68k/amiga	amiga		"Model: Amiga"
# m68k/mac	mac		"Model: Macintosh"
# m68k/mvme	pc		"Model: Motorola"
# m68k/bvme	pc		"Model: BVME[46]000"
# m68k/{sun,apollo,next,q40,hp300} Not supported by Debian

# ppc/apus	amiga		"machine: Amiga"
# ppc/chrp	pc,mac		"machine: CHRP"
# ppc/pmac	mac		"machine: PowerMac|[Pp]ower[Bb]ook*|Power|iMac*|PowerMac1*"
# ppc/prep	pc		"machine: PReP"
# ppc/{bbox,mbx,ppc64,82xx,8xx} Not yet supported by Debian

# arm/*		pc		(refered to as 'arm' only)

guess_arch () {
    local arch subarch line

    arch=`dpkg --print-installation-architecture`
    
    if [ "$arch" = 'powerpc' -o "$arch" = 'm68k' ]; then
	if [ "$arch" = powerpc ]; then
	    line = `sed -n 's/^machine.*: *//p' /proc/cpuinfo`
	    if [ "$line" = '' ]; then
		echo unknown
		return 0
	    fi
	    subarch=`echo $line|tr A-Z a-z`
	elif [ "$arch" = m68k ]; then
	    line=`sed -n 's/^Model.*: *//p' /proc/hardware`
	    if [ "$line" = '' ]; then
		echo unknown
		return 0
	    fi
	    subarch=`echo $line|tr A-Z a-z`
	fi
	case "$subarch" in
	    *amiga*)
		subarch=amiga
		;;
	    *chrp*)
		subarch=chrp
		;;
	    *prep*)
		subarch=prep
		;;
	    *macintosh*|*powermac*|*powerbook*|*power*|*imac*|*powermac1*)
		subarch=mac
		;;
	    *atari*)
		subarch=atari
		;;
	    *motorola*)
		subarch=mvme
		;;
	    *bvme*)
		subarch=bvme
		;;
	    *)
		subarch=`echo $subarch|sed  's/^\s*//'`
		;;
	esac
	arch="$arch/$subarch"
    fi
    echo $arch
    return 0
}

available_fontfaces () {
    echo "$fontsets" | sort | \
	grep "^$codeset-" | \
	sed -e "s/^$codeset-//" \
	    -e 's/[0-9][0-9]*x[0-9][0-9]*$//' \
	    -e 's/[0-9]*$//' | \
	uniq
}

available_fontsizes () {
    echo "$fontsets" | sort | \
	grep "^$codeset-$fontface" | \
	sed -e "s/^$codeset-$fontface//" | \
	uniq
}

eval `locale`            # TODO: d-i

locale=$LC_CTYPE

case "$locale" in
    aa_*)
	default_codeset=Lat15
	codeset_priority=low
	;;
    af_*)
	default_codeset=Lat15
	codeset_priority=low
	;;
    am_*)
	default_codeset=Ethiopic
	codeset_priority=low
	;;
    an_*)
	default_codeset=Lat15
	codeset_priority=low
	;;
    ar_*)
	default_codeset=Arabic
	codeset_priority=low
	;;
    az_*)
	default_codeset=Uni3
	codeset_priority=low
	;;
    be_*)
	default_codeset=CyrSlav
	codeset_priority=low
	;;
    bg_*)
	default_codeset=CyrSlav
	codeset_priority=low
	;;
    bn_*)
	default_codeset=unsupported
	codeset_priority=low
	;;
    br_*)
	default_codeset=Lat15
	codeset_priority=low
	;;
    bs_*)
	default_codeset=Uni3
	codeset_priority=low
	;;
    byn_*)
	default_codeset=Ethiopian
	codeset_priority=low
	;;
    ca_*)
	default_codeset=Lat15
	codeset_priority=low
	;;
    cs_*)
	default_codeset=Lat2
	codeset_priority=low
	;;
    cy_*)
	default_codeset=Lat38
	codeset_priority=low
	;;
    da_*)
	default_codeset=Lat15
	codeset_priority=low
	;;
    de_*)
	default_codeset=Lat15
	codeset_priority=low
	;;
    el_*)
	default_codeset=Greek
	codeset_priority=low
	;;
    en_*)
	default_codeset=Lat15
	codeset_priority=low
	;;
    eo_*)
	default_codeset=Lat38
	codeset_priority=low
	;;
    es_*)
	default_codeset=Lat15
	codeset_priority=low
	;;
    et_*)
	default_codeset=Lat15
	codeset_priority=low
	;;
    eu_*)
	default_codeset=Lat15
	codeset_priority=low
	;;
    fa_*)
	default_codeset=Arabic
	codeset_priority=low
	;;
    fi_*)
	default_codeset=Lat15
	codeset_priority=low
	;;
    fo_*)
	default_codeset=Lat15
	codeset_priority=low
	;;
    fr_*)
	default_codeset=Lat15
	codeset_priority=low
	;;
    ga_*)
	default_codeset=Lat38
	codeset_priority=low
	;;
    gd_*)
	default_codeset=Lat15
	codeset_priority=low
	;;
    gez_*)
	default_codeset=Ethiopian
	codeset_priority=low
	;;
    gl_*)
	default_codeset=Lat15
	codeset_priority=low
	;;
    gu_*)
	default_codeset=unsupported
	codeset_priority=low
	;;
    gv_*)
	default_codeset=Lat15
	codeset_priority=low
	;;
    he_*)
	default_codeset=Hebrew
	codeset_priority=low
	;;
    hi_*)
	default_codeset=unsupported
	codeset_priority=low
	;;
    hr_*)
	default_codeset=Lat2
	codeset_priority=low
	;;
    hu_*)
	default_codeset=Lat2
	codeset_priority=low
	;;
    hy_*)
	default_codeset=Armenian
	codeset_priority=low
	;;
    id_*)
	default_codeset=Lat15
	codeset_priority=low
	;;
    is_*)
	default_codeset=Lat15
	codeset_priority=low
	;;
    it_*)
	default_codeset=Lat15
	codeset_priority=low
	;;
    iw_*)
	default_codeset=Hebrew
	codeset_priority=low
	;;
    ja_*)
	default_codeset=unsupported
	codeset_priority=low
	;;
    ka_*)
	default_codeset=Georgian
	codeset_priority=low
	;;
    kl_*)
	default_codeset=Lat15
	codeset_priority=low
	;;
    kn_*)
	default_codeset=unsupported
	codeset_priority=low
	;;
    ko_*)
	default_codeset=unsupported
	codeset_priority=low
	;;
    kw_*)
	default_codeset=Lat15
	codeset_priority=low
	;;
    lg_*)
	default_codeset=Lat15 # TODO: This must be ISO-8859-10 (Latin6)
	codeset_priority=low
	;;
    lo_*)
	default_codeset=Lao
	codeset_priority=low
	;;
    lt_*)
	default_codeset=Lat7
	codeset_priority=low
	;;
    lv_*)
	default_codeset=Lat7
	codeset_priority=low
	;;
    mi_*)
	default_codeset=Lat7
	codeset_priority=low
	;;
    mk_*)
	default_codeset=CyrSlav
	codeset_priority=low
	;;
    ml_*)
	default_codeset=unsupported
	codeset_priority=low
	;;
    mn_*)
	default_codeset=CyrAsia
	codeset_priority=low
	;;
    mr_*)
	default_codeset=unsupported
	codeset_priority=low
	;;
    ms_*)
	default_codeset=Lat15 # TODO: Is this correct? (Malay language)
	codeset_priority=low
	;;
    mt_*)
	default_codeset=Lat38
	codeset_priority=low
	;;
    nb_*)
	default_codeset=Lat15
	codeset_priority=low
	;;
    ne_*)
	default_codeset=unsupported
	codeset_priority=low
	;;
    nl_*)
	default_codeset=Lat15
	codeset_priority=low
	;;
    nn_*)
	default_codeset=Lat15
	codeset_priority=low
	;;
    oc_*)
	default_codeset=Lat15
	codeset_priority=low
	;;
    om_*)
	default_codeset=Lat15
	codeset_priority=low
	;;
    pa_*)
	default_codeset=unsupported
	codeset_priority=low
	;;
    pl_*)
	default_codeset=Lat2
	codeset_priority=low
	;;
    pt_*)
	default_codeset=Lat15
	codeset_priority=low
	;;
    ro_*)
	default_codeset=Lat2
	codeset_priority=low
	;;
    ru_*)
	default_codeset=CyrKoi
	codeset_priority=low
	;;
    ru_*)
	default_codeset=CyrKoi
	codeset_priority=low
	;;
    se_*)
	default_codeset=Uni1
	codeset_priority=low
	;;
    sid_*)
	default_codeset=Lat15 # TODO: Is this correct? (Sidama language)
	codeset_priority=low
	;;
    sk_*)
	default_codeset=Lat2
	codeset_priority=low
	;;
    sl_*)
	default_codeset=Lat2
	codeset_priority=low
	;;
    so_*)
	default_codeset=Lat15
	codeset_priority=low
	;;
    sq_*)
	default_codeset=Lat15
	codeset_priority=low
	;;
    sr_*)
	default_codeset=CyrSlav
	codeset_priority=low
	;;
    st_*)
	default_codeset=Lat15 # TODO: Is this correct? (Sotho language)
	codeset_priority=low
	;;
    sv_*)
	default_codeset=Lat15
	codeset_priority=low
	;;
    ta_*)
	default_codeset=unsupported
	codeset_priority=low
	;;
    te_*)
	default_codeset=unsupported
	codeset_priority=low
	;;
    tg_*)
	default_codeset=CyrAsia
	codeset_priority=low
	;;
    th_*)
	default_codeset=Thai
	codeset_priority=low
	;;
    ti_*)
	default_codeset=Ethiopian
	codeset_priority=low
	;;
    tig_*)
	default_codeset=Ethiopian
	codeset_priority=low
	;;
    tl_*)
	default_codeset=Lat15
	codeset_priority=low
	;;
    tr_*)
	default_codeset=Lat15
	codeset_priority=low
	;;
    tt_*)
	default_codeset=Lat15 # TODO: Is this correct? (Tatar language)
	codeset_priority=low
	;;
    uk_*)
	default_codeset=CyrSlav
	codeset_priority=low
	;;
    ur_*)
	default_codeset=Arabic
	codeset_priority=low
	;;
    uz_*)
	default_codeset=Lat15 # TODO: Is this correct? (Uzbek language)
	codeset_priority=low
	;;
    uz_*\@cyrillic)
	default_codeset=CyrAsia
	codeset_priority=low
	;;
    vi_*)
	default_codeset=Vietnamese
	codeset_priority=low
	;;
    wa_*)
	default_codeset=Lat15
	codeset_priority=low
	;;
    xh_*)
	default_codeset=Lat15
	codeset_priority=low
	;;
    yi_*)
	default_codeset=Hebrew
	codeset_priority=low
	;;
    zh_*)
	default_codeset=unsupported
	codeset_priority=low
	;;
    zu_*)
	default_codeset=Lat15
	codeset_priority=low
	;;
    *)
	default_codeset=Uni1
	codeset_priority=medium
	;;
esac



default_layout=''
layout_priority=''
case "$locale" in
    *_AL*)
	default_layout=al
	;;
    ar_*)
	default_layout=ar
	;;
    *_AM*)
	default_layout=am
	;;
    *_AZ*)
	default_layout=az
	;;
    *_BY*)
	default_layout=by
	;;
    *_BE*)
	default_layout=be
	;;
    *_BD*)
	default_layout=ben
	;;
    bs_*)
	default_layout=bs
	;;
    *_BR*)
	default_layout=br
	;;
    *_BG*)
	default_layout=bg
	layout_priority=critical
	;;
    *_CA*)
	default_layout=ca
	;;
    *_HR*)
	default_layout=hr
	;;
    *_CZ*)
	default_layout=cz
	layout_priority=critical
	;;
    *_DK*)
	default_layout=dk
	;;
    *_NL*)
	default_layout=nl
	;;
    *_EE*)
	default_layout=ee
	;;
    fi_FI*)
	default_layout=fi
	;;
    fr_*)
	default_layout=fr
	layout_priority=critical
	;;
    *_GE*)
	default_layout=ge
	layout_priority=critical
	;;
    de_*)
	default_layout=de
	;;
    el_*)
	default_layout=el
	;;
    gu_*)
	default_layout=guj
	;;
    pa_*)
	default_layout=gur
	;;
    hi_*)
	default_layout=dev
	;;
    *_HU*)
	default_layout=hu
	;;
    *_IS*)
	default_layout=is
	;;
    *_IR*)
	default_layout=ir
	;;
    *_IE*)
	default_layout=ie
	;;
    *_IL*)
	layout_priority=critical
	default_layout=il
	;;
    *_IT*)
	default_layout=it
	;;
    *_JP*)
	default_layout=jp
	;;
    kn_*)
	default_layout=kn
	;;
    lo_*)
	default_layout=lo
	;;
    # TODO: Is the following list correct?
    *_AR*|*_BO*|*_CL*|*_CO*|*_CR*|*_DO*|*_EC*|*_GT*|*_HN*|*_MX*|*_NI*|*_PA*|*_PE*|es_PR*|*_PY*|*_SV*|es_US*|*_UY*|*_VE*)
	default_layout=la
	;;
    *_LV*)
	default_layout=lv
	;;
    *_LT*)
	layout_priority=critical
	default_layout=lt
	;;
    *_MK*)
	default_layout=mk
	;;
    ml_*)
	default_layout=ml
	;;
    *_MT*)
	default_layout=mt
	layout_priority=critical
	;;
    *_MN*)
	default_layout=mn
	;;
    se_FI)
	default_layout=se_FI
	;;
    se_NO*)
	default_layout=se_NO
	;;
    se_SE*)
	default_layout=se_SE # TODO: there is also "se" layout
	;;
    no_NO*)
	default_layout=no
	;;
    *_PL*)
	default_layout=pl
	;;
    *_PT*)
	default_layout=pt
	;;
    *_RO*)
	default_layout=ro
	;;
    *_RU*)
	default_layout=ru
	layout_priority=critical
	;;
    sr_*)
	default_layout=sr
	;;
    *_SK*)
	default_layout=sk
	;;
    *_SI*)
	default_layout=si
	;;
    *_ES*)
	default_layout=es
	;;
    *_CH*)
	default_layout=ch
	;;
    *_TJ)
	default_layout=tj
	;;
    ta_*)
	default_layout=tml
	;;
    te_*)
	default_layout=tel
	;;
    *_TH*)
	default_layout=th
	layout_priority=critical
	;;
    *_TR*)
	default_layout=tr
	layout_priority=critical
	;;
    en_US*)
	default_layout=us
	;;
    *_UA*)
	default_layout=ua
	;;
    *_GB)
	default_layout=gb
	;;
    *_VN*)
	default_layout=vn
	;;
    *)
	default_layout=us
	;;
esac
default_variant=''

# TODO: d-i
default_charmap=`locale charmap` 
if [ "$locale" = C ]; then
    default_charmap=UTF-8
    charmap_priority=high
elif echo "$charmaps" | grep "$default_charmap" >/dev/null; then
    charmap_priority=low
else
    default_charmap=UTF-8
    charmap_priority=medium
fi

arch=`guess_arch`

case "$arch" in
    i386)
	default_model=pc105
	model_priority=medium
	;;
    sparc)
	default_model=sun4 # also sun5, pc105
	model_priority=critical
	;;
    alpha)
	default_model=pc105
	model_priority=medium
	;;
    arm)
	default_model=pc105
	model_priority=medium
	;;
    arm/riscpc)
	default_model=pc105
	model_priority=medium
	;;
    mips)
	default_model=pc105
	model_priority=medium
	;;
    m68k/atari)
	default_model=ataritt
	model_priority=medium
	;;
    m68k/amiga)
	default_model=amiga
	model_priority=medium
	;;
    m68k/mac)
	default_model=macintosh_old
	model_priority=medium
	;;
    m68k/mvme)
	default_model=pc105
	model_priority=medium
	;;
    m68k/bvme)
	default_model=pc105
	model_priority=medium
	;;
    powerpc/amiga)
	default_model=amiga # apus
	model_priority=medium
	;;
    powerpc/chrp)
	default_model=pc105 # also macintosh_old
	model_priority=critical
	;;
    powerpc/mac)
	default_model=pc105
	model_priority=medium
	;;
    powerpc/prep)
	default_model=pc105
	model_priority=medium
	;;
    amd64)
	default_model=pc105
	model_priority=medium
	;;
    *)
	default_model=pc105
	model_priority=critical
	;;
esac    

######################################################################

CONFIGFILE=/etc/default/console-setup

# Load the config file, if it exists.
if [ -e $CONFIGFILE ]; then
    . $CONFIGFILE || true
    
    # Store values from config file into debconf db.
    
    db_set console-setup/ttys "$ACTIVE_CONSOLES"
    default_charmap="$CHARMAP"
    default_codeset="$CODESET"
    db_set console-setup/fontface "$FONTFACE"
    db_set console-setup/fontsize "$FONTSIZE"
    default_model="$XKBMODEL"

    case "$XKBLAYOUT" in
	# TODO: make s.t. to not forget to update this list
	yu,sr|us,am|us,ar|us,ben|us,bg|us,by|us,dev|us,el|us,ge_la|us,ge_ru|us,guj|us,gur|us,il|us,il_phonetic|us,ir|us,iu|us,kan|us,lo|us,mk|us,mm|us,ml|us,ori|us,ru|us,syr|us,syr_phonetic|us,tel|us,th|us,tj|us,tml|us,ua)
	    default_layout=${XKBLAYOUT#*,}
	    default_variant="${XKBVARIANT#*,}"
	    unsupported_layout=no
	    ;;	    
	*,*)
	    unsupported_layout=yes
	    ;;
	*)
	    default_layout="$XKBLAYOUT"
	    default_variant="$XKBVARIANT"
	    ;;
    esac

    default_toggle='No toggling'
    default_switch='No temporary switch'
    default_altgr='No AltGr key'
    default_compose='No compose key'
    for option in `echo $XKBOPTIONS | sed 's/,/ /g'`; do
	case "$option" in
	    grp:caps_toggle)
		default_toggle='Caps Lock';;
	    grp:sclk_toggle)
		default_toggle='Scroll Lock';;
	    grp:toggle)
		default_toggle='Right Alt';;
	    grp:rctrl_toggle)
		default_toggle='Right Control';;
	    grp:rshift_toggle)
		default_toggle='Right Shift';;
	    grp:rwin_toggle)
		default_toggle='Right Win-key';;
	    grp:menu_toggle)
		default_toggle='Menu-key';;
	    grp:alt_shift_toggle)
		default_toggle='Alt+Shift';;
	    grp:ctrl_shift_toggle)
		default_toggle='Control+Shift';;
	    grp:ctrl_alt_toggle)
		default_toggle='Control+Alt';;
	    grp:shift_toggle)
		default_toggle='Both Shift keys together';;
	    grp:ctrls_toggle)
		default_toggle='Both Control keys together';;
	    grp:alts_toggle)
		default_toggle='Both Alt keys together';;
	    grp:lalt_toggle)
		default_toggle='Left Alt';;
	    grp:lctrl_toggle)
		default_toggle='Left Control';;
	    grp:lshift_toggle)
		default_toggle='Left Shift';;
	    grp:lwin_toggle)
		default_toggle='Left Win-key';;
	    grp:switch)
		default_switch='Right Alt';;
	    grp:lswitch)
		default_switch='Left Alt';;
	    grp:rwin_switch)
		default_switch='Right Win-key';;
	    grp:lwin_switch)
		default_switch='Left Win-key';;
	    grp:win_switch)
		default_switch='Both Win-keys';;
	    lv3:ralt_switch)
		default_altgr='Right Alt';;
	    lv3:ralt_switch_multikey)
		default_altgr='Right Alt (Shift+RightAlt=Compose)';;
	    lv3:switch)
		default_altgr='Right Control';;
	    lv3:menu_switch)
		default_altgr='Menu-key';;
	    lv3:rwin_switch)
		default_altgr='Right Win-key';;
	    lv3:lwin_switch)
		default_altgr='Left Win-key';;
	    lv3:win_switch)
		default_altgr='Both Win-keys';;
	    compose:ralt)
		default_compose='Right Alt';;
	    compose:rwin)
		default_compose='Right Win-key';;
	    compose:menu)
		default_compose='Menu-key';;
	    compose:caps)
		default_compose='Caps Lock';;
	esac
    done
    db_set console-setup/toggle "$default_toggle"
    db_set console-setup/switch "$default_switch"
    db_set console-setup/altgr "$default_altgr"
    db_set console-setup/compose "$default_compose"
fi

######################################################################

STATE=1
old_state=0
while :; do
    starting_state=$STATE
    case "$STATE" in
	1)
	    if \
		ask_debconf console-setup/model $model_priority \
		    model $default_model
	    then
		db_set console-setup/modelcode "$RET"
		STATE=$(($STATE + 1))
	    else
		STATE=$(($STATE - 1))
	    fi
	    ;;
	2)
	    if [ "$unsupported_layout" = yes ]; then
		if [ "$STATE" -ge "$old_state" ]; then
		    db_input medium console-setup/dont_ask_layout || true
		    db_go || true
		    db_set console-setup/layoutcode "$XKBLAYOUT"
		    STATE=$(($STATE + 1))
		else
		    STATE=$(($STATE - 1))
		fi
	    elif \
		ask_debconf console-setup/layout critical \
		    layout "$default_layout"
	    then
		layout="$RET"
		case "$layout" in
		    # TODO: make s.t. to not forget to update this list
		    am|ar|ben|bg|by|dev|el|ge_la|ge_ru|guj|gur|il|il_phonetic|ir|iu|kan|lo|mk|mm|ml|ori|ru|syr|syr_phonetic|tel|th|tj|tml|ua)
			latin=no
			real_layout=us,$layout
			;;
		    sr)
			latin=no
			real_layout=yu,sr
			;;
		    *)
			latin=yes
			real_layout=$layout
			;;
		esac
		db_set console-setup/layoutcode "$real_layout"
		STATE=$(($STATE + 1))
	    else
		STATE=$(($STATE - 1))
	    fi
	    ;;
	3)
	    if [ "$unsupported_layout" = yes ]; then
		db_set console-setup/variantcode "$XKBVARIANT"
		# skip the question without making Debconf loop
		STATE=$(( $STATE + $STATE - $old_state ))
	    elif \
		ask_debconf console-setup/variant high \
                    "variant\*${layout}" "$default_variant"
	    then
		if [ "$latin" = yes ]; then
		    db_set console-setup/variantcode "$RET"
		else
		    db_set console-setup/variantcode ",$RET"
		fi
		STATE=$(($STATE + 1))
	    else
		STATE=$(($STATE - 1))
	    fi
	    ;;
	4)
	    if [ "$unsupported_layout" = yes ]; then
		db_set console-setup/optionscode "$XKBOPTIONS"
		# skip the questions without making Debconf loop
		STATE=$(( $STATE + $STATE - $old_state ))
	    else
		if [ "$latin" = yes ]; then
		    db_set console-setup/toggle 'No toggling'
		    db_set console-setup/switch 'No temporary switch'
		fi
		db_beginblock
		if [ "$latin" = no ]; then
		    db_input high console-setup/toggle || true
		    db_input medium console-setup/switch || true
		fi
		db_input medium console-setup/altgr || true
		db_input medium console-setup/compose || true
		db_endblock

		if db_go; then 
		    STATE=$(($STATE + 1))
		else
		    STATE=$(($STATE - 1))
		fi

		db_get console-setup/toggle
		case "$RET" in
		    Caps\ Lock)
		        caps_allocated=yes
		        toggle=caps_toggle;;
		    Scroll\ Lock)
		        sclk_allocated=yes
		        toggle=sclk_toggle;;
		    Right\ Alt)
		        ralt_allocated=yes
		        toggle=toggle;;
		    Right\ Control)
		        rctrl_allocated=yes
		        toggle=rctrl_toggle;;
		    Right\ Shift)
		        rshift_allocated=yes
		        toggle=rshift_toggle;;
		    Right\ Win-key)
		        rwin_allocated=yes
		        toggle=rwin_toggle;;
		    Menu-key)
			menu_allocated=yes
			toggle=menu_toggle;;
		    Alt+Shift)
			toggle=alt_shift_toggle;;
		    Control+Shift)
			toggle=ctrl_shift_toggle;;
		    Control+Alt)
			toggle=ctrl_alt_toggle;;
		    Both\ Shift\ keys\ together)
		        toggle=shift_toggle;;
		    Both\ Control\ keys\ together)
		        toggle=ctrls_toggle;;
		    Both\ Alt\ keys\ together)
		        toggle=alts_toggle;;
		    Left\ Alt)
		        lalt_allocated=yes
		        toggle=lalt_toggle;;
		    Left\ Control)
		        lctrl_allocated=yes
		        toggle=lctrl_toggle;;
		    Left\ Shift)
		        lshift_allocated=yes
		        toggle=lshift_toggle;;
		    Left\ Win-key)
		        lwin_allocated=yes
		        toggle=lwin_toggle;;
		    No\ toggling)
		        toggle='';;
		    *)
			echo Unknown toggle key option
			exit 1
			;;
		esac
		if [ "$toggle" ]; then
		    toggle=grp:$toggle
		fi
		
		db_get console-setup/switch
		switch=''
		case "$RET" in
		    Right\ Alt)
		        if [ "$ralt_allocated" != yes ]; then
			    switch=switch
			    ralt_allocated=yes
		        fi;;
		    Left\ Alt)
		        if [ "$lalt_allocated" != yes ]; then
			    switch=lswitch
			    lalt_allocated=yes
		        fi;;
		    Right\ Win-key)
		        if [ "$rwin_allocated" != yes ]; then
			    switch=rwin_switch
			    rwin_allocated=yes
		        fi;;
		    Left\ Win-key)
		        if [ "$lwin_allocated" != yes ]; then
			    switch=lwin_switch
			    lwin_allocated=yes
		        fi;;
		    Both\ Win-keys)
		        if \
			    [ "$rwin_allocated" != yes ] \
			    && [ "$lwin_allocated" != yes ]
			then
			    switch=win_switch
			    rwin_allocated=yes
			    lwin_allocated=yes
		        fi;;
		    No\ temporary\ switch)
		        switch='';;
		    *)
			echo Unknown switch key option
			exit 1
			;;
		esac
		if [ "$switch" ]; then
		    switch=grp:$switch
		fi
		
		db_get console-setup/altgr
		altgr=''
		case "$RET" in
		    No?AltGr?key)
			altgr='';;
		    Right?Alt)
			if [ "$ralt_allocated" != yes ]; then
			    altgr=ralt_switch
			    ralt_allocated=yes
			fi;;
		    Right?Alt??Shift+RightAlt=Compose?)
			if [ "$ralt_allocated" != yes ]; then
			    altgr=ralt_switch_multikey
			    ralt_allocated=yes
			fi;;
		    Right?Control)
			if [ "$rctrl_allocated" != yes ]; then
			    altgr=switch
			    rctrl_allocated=yes
			fi;;
		    Menu-key)
			if [ "$menu_allocated" != yes ]; then
			    altgr=menu_switch
			    menu_allocated=yes
			fi;;
		    Right?Win-key)
			if [ "$rwin_allocated" != yes ]; then
			    altgr=rwin_switch
			    rwin_allocated=yes
			fi;;
		    Left?Win-key)
			if [ "$lwin_allocated" != yes ]; then
			    altgr=lwin_switch
			    lwin_allocated=yes
			fi;;
		    Both?Win-keys)
			if \
			    [ "$rwin_allocated" != yes ] \
			    && [ "$lwin_allocated" != yes ]
			then
			    altgr=win_switch
			    rwin_allocated=yes
			    lwin_allocated=yes
			fi;;
		    *)
			echo Unknown altgr key option
			exit 1
			;;
		esac
		if [ "$altgr" ]; then
		    altgr=lv3:$altgr
		fi

		db_get console-setup/compose
		compose=''
		case "$RET" in
		    No?compose?key)
			compose='';;
		    Right?Alt)
			if [ "$ralt_allocated" != yes ]; then
			    compose=ralt
			    ralt_allocated=yes
			fi;;
		    Right?Win-key)
			if [ "$rwin_allocated" != yes ]; then
			    compose=rwin
			    rwin_allocated=yes
			fi;;
		    Menu-key)
			if [ "$menu_allocated" != yes ]; then
			    compose=menu
			    menu_allocated=yes
			fi;;
		    Caps?Lock)
			if [ "$caps_allocated" != yes ]; then
			    compose=caps
			    caps_allocated=yes
			fi;;
		    *)
			echo Unknown compose key option
			exit 1
			;;
		esac
		if [ "$compose" ]; then
		    compose=compose:$compose
		fi
		
		case "$real_layout" in
		    *,*)
		        leds=grp_led:scroll;;
		    *)
			leds='';;
		esac
		
		options=$(
		    echo $toggle $switch $altgr $compose $leds \
			| sed -e 's/^ *//' -e 's/ *$//' -e 's/  */,/g'
		)
		db_set console-setup/optionscode "$options"
	    fi
	    ;;		    
	5)
	    # add commas
	    choices=`echo "$charmaps" | sed -e 's/$/,/g' | sort `
	    # remove newlines
	    choices=`echo $choices | sed -e 's/,$//' `
	    db_subst console-setup/charmap CHOICES "$choices"
	    db_set console-setup/charmap "$default_charmap"
	    db_input $charmap_priority console-setup/charmap || true
	    if db_go; then
		STATE=$(($STATE + 1))
	    else
		STATE=$(($STATE - 1))
	    fi
	    db_get console-setup/charmap
	    charmap=$RET
	    ;;
	6)
	    db_set console-setup/codeset "$default_codeset"
	    db_input $codeset_priority console-setup/codeset || true
	    if db_go; then
		STATE=$(($STATE + 1))
	    else
		STATE=$(($STATE - 1))
	    fi
	    db_get console-setup/codeset
	    codeset=$RET
	    ;;
	7)
	    fontfaces=`available_fontfaces`
	    # add commas
	    choices=`echo "$fontfaces" | sed -e 's/$/,/g'`
	    # remove newlines
	    choices=`echo $choices | sed -e 's/,$//'`
	    db_subst console-setup/fontface CHOICES "$choices"
	    db_input medium console-setup/fontface || true
	    if db_go; then
		STATE=$(($STATE + 1))
	    else
		STATE=$(($STATE - 1))
	    fi
	    db_get console-setup/fontface
	    fontface=$RET
	    ;;
	8)
	    fontsizes=`available_fontsizes`
	    # add commas
	    choices=`echo "$fontsizes" | sed -e 's/$/,/g' `
	    # remove newlines
	    choices=`echo $choices | sed -e 's/,$//'`
	    db_subst console-setup/fontsize CHOICES "$choices"
	    db_input medium console-setup/fontsize || true
	    if db_go; then
		STATE=$(($STATE + 1))
	    else
		STATE=$(($STATE - 1))
	    fi
	    db_get console-setup/fontsize
	    fontsize=$RET
	    ;;
	9)
	    db_input medium console-setup/ttys || true
	    if db_go; then
		STATE=$(($STATE + 1))
	    else
		STATE=$(($STATE - 1))
	    fi
	    db_get console-setup/ttys
	    ttys=$RET
	    ;;
	*)
	    break
	    ;;
    esac
    old_state=$starting_state
done

if [ $STATE -eq 1 ]; then
    exit 10
fi
