#!/bin/bash

#     Copyright Â© 2005 Anton Zinoviev <anton@lml.bas.bg>

#     This program is free software; you can redistribute it and/or modify
#     it under the terms of the GNU General Public License as published by
#     the Free Software Foundation; either version 2 of the License, or
#     (at your option) any later version.

#     This program is distributed in the hope that it will be useful,
#     but WITHOUT ANY WARRANTY; without even the implied warranty of
#     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#     GNU General Public License for more details.

#     If you have not received a copy of the GNU General Public License
#     along with this program, write to the Free Software Foundation, Inc.,
#     59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

# This script would be much simpler if written in perl but that way it can be
# used in the Installer

set -e

. /usr/share/debconf/confmodule

## FONTSETS ## Will be replaced by assignment for $fontsets:

# fontsets='Arabic-Fixed15
# Arabic-Fixed16
# Arabic-vga14
# ... 
# Vietnamese-Fixed18
# '

## CHARMAPS ## Will be replaced by assignment for $charmaps:

# charmaps='ARMSCII-8
# CP1251
# CP1255
# ...
# UTF-8'

## KBDNAMES ## Will be replaced by assignment for $kbdnames:

# kbdnames='model*logicdp*Logitech Cordless Desktop Pro
# model*omnikey101*Northgate OmniKey 101
# ...
# layout*el*Greek
# ...
# variant*it*nodeadkeys*Eliminate dead keys'

db_capb backup

ask_debconf () {
    local template priority prefix default_code default_description choices

    template=$1     # The template to ask
    priority=$2     # The priority for the question
    prefix=$3       # The prefix for $kbdnames
    default_code=$4 # The default choice (optional)

    choices=`echo "$kbdnames" | grep "^$prefix\*" | 
        sed -e "s/^$prefix\*[^\*]*\*//" -e 's/,//g' -e 's/$/,/' | sort `
    choices=`echo $choices | sed 's/, *$//'`

    db_subst $template CHOICES "$choices"
    if [ -n "$default_code" ]; then
	default_description=`echo "$kbdnames" |  
            grep "^$prefix\*${default_code}\*" |
            sed -e "s/^$prefix\*${default_code}\*//"`
	if [ -n "$default_description" ]; then
	    db_set $template "$default_description"
	fi
    fi

    db_input $priority $template || true
    db_go || return 255
    db_get $template
    RET=`echo "$kbdnames" | grep "^$prefix\*[^\*]*\*" |
             sed 's/  */ /g' |
             grep "\*$RET\$" |
             sed -e "s/^$prefix\*\([^\*]*\)\*.*/\1/" `
    return 0
}

# The guess arch code is taken from "console-data.conf"
# (translated from Perl to shell)
# TODO: use archdetect instead.

# SUBARCH	KEYMAP SET	DETECTION
# m68k/atari	atari		"Model: Atari"
# m68k/amiga	amiga		"Model: Amiga"
# m68k/mac	mac		"Model: Macintosh"
# m68k/mvme	pc		"Model: Motorola"
# m68k/bvme	pc		"Model: BVME[46]000"
# m68k/{sun,apollo,next,q40,hp300} Not supported by Debian

# ppc/apus	amiga		"machine: Amiga"
# ppc/chrp	pc,mac		"machine: CHRP"
# ppc/pmac	mac		"machine: PowerMac|[Pp]ower[Bb]ook*|Power|iMac*|PowerMac1*"
# ppc/prep	pc		"machine: PReP"
# ppc/{bbox,mbx,ppc64,82xx,8xx} Not yet supported by Debian

# arm/*		pc		(refered to as 'arm' only)

guess_arch () {
    local arch subarch line

    arch=`dpkg --print-installation-architecture`
    
    if [ "$arch" = 'powerpc' -o "$arch" = 'm68k' ]; then
	if [ "$arch" = powerpc ]; then
	    line = `sed -n 's/^machine.*: *//p' /proc/cpuinfo`
	    if [ "$line" = '' ]; then
		echo unknown
		return 0
	    fi
	    subarch=`echo $line|tr A-Z a-z`
	elif [ "$arch" = m68k ]; then
	    line=`sed -n 's/^Model.*: *//p' /proc/hardware`
	    if [ "$line" = '' ]; then
		echo unknown
		return 0
	    fi
	    subarch=`echo $line|tr A-Z a-z`
	fi
	case "$subarch" in
	    *amiga*)
		subarch=amiga
		;;
	    *chrp*)
		subarch=chrp
		;;
	    *prep*)
		subarch=prep
		;;
	    *macintosh*|*powermac*|*powerbook*|*power*|*imac*|*powermac1*)
		subarch=mac
		;;
	    *atari*)
		subarch=atari
		;;
	    *motorola*)
		subarch=mvme
		;;
	    *bvme*)
		subarch=bvme
		;;
	    *)
		subarch=`echo $subarch|sed  's/^\s*//'`
		;;
	esac
	arch="$arch/$subarch"
    fi
    echo $arch
    return 0
}

available_fontfaces () {
    echo "$fontsets" | sort | \
	grep "^$codeset-" | \
	sed -e "s/^$codeset-//" -e 's/[0-9]*$//' | \
	uniq
}

available_fontsizes () {
    echo "$fontsets" | sort | \
	grep "^$codeset-$fontface" | \
	sed -e "s/^$codeset-$fontface//" | \
	uniq
}

eval `locale`            # TODO: d-i

locale=$LC_CTYPE

case "$locale" in
    aa_*)
	codeset=Lat15
	codeset_priority=low
	;;
    af_*)
	codeset=Lat15
	codeset_priority=low
	;;
    am_*)
	codeset=Ethiopic
	codeset_priority=low
	;;
    an_*)
	codeset=Lat15
	codeset_priority=low
	;;
    ar_*)
	codeset=Arabic
	codeset_priority=low
	;;
    az_*)
	codeset=Uni3
	codeset_priority=low
	;;
    be_*)
	codeset=CyrSlav
	codeset_priority=low
	;;
    bg_*)
	codeset=CyrSlav
	codeset_priority=low
	;;
    bn_*)
	codeset=unsupported
	codeset_priority=low
	;;
    br_*)
	codeset=Lat15
	codeset_priority=low
	;;
    bs_*)
	codeset=Uni3
	codeset_priority=low
	;;
    byn_*)
	codeset=Ethiopian
	codeset_priority=low
	;;
    ca_*)
	codeset=Lat15
	codeset_priority=low
	;;
    cs_*)
	codeset=Lat2
	codeset_priority=low
	;;
    cy_*)
	codeset=Lat38
	codeset_priority=low
	;;
    da_*)
	codeset=Lat15
	codeset_priority=low
	;;
    de_*)
	codeset=Lat15
	codeset_priority=low
	;;
    el_*)
	codeset=Greek
	codeset_priority=low
	;;
    en_*)
	codeset=Lat15
	codeset_priority=low
	;;
    eo_*)
	codeset=Lat38
	codeset_priority=low
	;;
    es_*)
	codeset=Lat15
	codeset_priority=low
	;;
    et_*)
	codeset=Lat15
	codeset_priority=low
	;;
    eu_*)
	codeset=Lat15
	codeset_priority=low
	;;
    fa_*)
	codeset=Arabic
	codeset_priority=low
	;;
    fi_*)
	codeset=Lat15
	codeset_priority=low
	;;
    fo_*)
	codeset=Lat15
	codeset_priority=low
	;;
    fr_*)
	codeset=Lat15
	codeset_priority=low
	;;
    ga_*)
	codeset=Lat38
	codeset_priority=low
	;;
    gd_*)
	codeset=Lat15
	codeset_priority=low
	;;
    gez_*)
	codeset=Ethiopian
	codeset_priority=low
	;;
    gl_*)
	codeset=Lat15
	codeset_priority=low
	;;
    gu_*)
	codeset=unsupported
	codeset_priority=low
	;;
    gv_*)
	codeset=Lat15
	codeset_priority=low
	;;
    he_*)
	codeset=Hebrew
	codeset_priority=low
	;;
    hi_*)
	codeset=unsupported
	codeset_priority=low
	;;
    hr_*)
	codeset=Lat2
	codeset_priority=low
	;;
    hu_*)
	codeset=Lat2
	codeset_priority=low
	;;
    hy_*)
	codeset=Armenian
	codeset_priority=low
	;;
    id_*)
	codeset=Lat15
	codeset_priority=low
	;;
    is_*)
	codeset=Lat15
	codeset_priority=low
	;;
    it_*)
	codeset=Lat15
	codeset_priority=low
	;;
    iw_*)
	codeset=Hebrew
	codeset_priority=low
	;;
    ja_*)
	codeset=unsupported
	codeset_priority=low
	;;
    ka_*)
	codeset=Georgian
	codeset_priority=low
	;;
    kl_*)
	codeset=Lat15
	codeset_priority=low
	;;
    kn_*)
	codeset=unsupported
	codeset_priority=low
	;;
    ko_*)
	codeset=unsupported
	codeset_priority=low
	;;
    kw_*)
	codeset=Lat15
	codeset_priority=low
	;;
    lg_*)
	codeset=Lat15 # TODO: This must be ISO-8859-10 (Latin6)
	codeset_priority=low
	;;
    lo_*)
	codeset=Lao
	codeset_priority=low
	;;
    lt_*)
	codeset=Lat7
	codeset_priority=low
	;;
    lv_*)
	codeset=Lat7
	codeset_priority=low
	;;
    mi_*)
	codeset=Lat7
	codeset_priority=low
	;;
    mk_*)
	codeset=CyrSlav
	codeset_priority=low
	;;
    ml_*)
	codeset=unsupported
	codeset_priority=low
	;;
    mn_*)
	codeset=CyrAsia
	codeset_priority=low
	;;
    mr_*)
	codeset=unsupported
	codeset_priority=low
	;;
    ms_*)
	codeset=Lat15 # TODO: Is this correct? (Malay language)
	codeset_priority=low
	;;
    mt_*)
	codeset=Lat38
	codeset_priority=low
	;;
    nb_*)
	codeset=Lat15
	codeset_priority=low
	;;
    ne_*)
	codeset=unsupported
	codeset_priority=low
	;;
    nl_*)
	codeset=Lat15
	codeset_priority=low
	;;
    nn_*)
	codeset=Lat15
	codeset_priority=low
	;;
    oc_*)
	codeset=Lat15
	codeset_priority=low
	;;
    om_*)
	codeset=Lat15
	codeset_priority=low
	;;
    pa_*)
	codeset=unsupported
	codeset_priority=low
	;;
    pl_*)
	codeset=Lat2
	codeset_priority=low
	;;
    pt_*)
	codeset=Lat15
	codeset_priority=low
	;;
    ro_*)
	codeset=Lat2
	codeset_priority=low
	;;
    ru_*)
	codeset=CyrKoi
	codeset_priority=low
	;;
    ru_*)
	codeset=CyrKoi
	codeset_priority=low
	;;
    se_*)
	codeset=Uni1
	codeset_priority=low
	;;
    sid_*)
	codeset=Lat15 # TODO: Is this correct? (Sidama language)
	codeset_priority=low
	;;
    sk_*)
	codeset=Lat2
	codeset_priority=low
	;;
    sl_*)
	codeset=Lat2
	codeset_priority=low
	;;
    so_*)
	codeset=Lat15
	codeset_priority=low
	;;
    sq_*)
	codeset=Lat15
	codeset_priority=low
	;;
    sr_*)
	codeset=CyrSlav
	codeset_priority=low
	;;
    st_*)
	codeset=Lat15 # TODO: Is this correct? (Sotho language)
	codeset_priority=low
	;;
    sv_*)
	codeset=Lat15
	codeset_priority=low
	;;
    ta_*)
	codeset=unsupported
	codeset_priority=low
	;;
    te_*)
	codeset=unsupported
	codeset_priority=low
	;;
    tg_*)
	codeset=CyrAsia
	codeset_priority=low
	;;
    th_*)
	codeset=Thai
	codeset_priority=low
	;;
    ti_*)
	codeset=Ethiopian
	codeset_priority=low
	;;
    tig_*)
	codeset=Ethiopian
	codeset_priority=low
	;;
    tl_*)
	codeset=Lat15
	codeset_priority=low
	;;
    tr_*)
	codeset=Lat15
	codeset_priority=low
	;;
    tt_*)
	codeset=Lat15 # TODO: Is this correct? (Tatar language)
	codeset_priority=low
	;;
    uk_*)
	codeset=CyrSlav
	codeset_priority=low
	;;
    ur_*)
	codeset=Arabic
	codeset_priority=low
	;;
    uz_*)
	codeset=Lat15 # TODO: Is this correct? (Uzbek language)
	codeset_priority=low
	;;
    uz_*\@cyrillic)
	codeset=CyrAsia
	codeset_priority=low
	;;
    vi_*)
	codeset=Vietnamese
	codeset_priority=low
	;;
    wa_*)
	codeset=Lat15
	codeset_priority=low
	;;
    xh_*)
	codeset=Lat15
	codeset_priority=low
	;;
    yi_*)
	codeset=Hebrew
	codeset_priority=low
	;;
    zh_*)
	codeset=unsupported
	codeset_priority=low
	;;
    zu_*)
	codeset=Lat15
	codeset_priority=low
	;;
    *)
	codeset=Uni1
	codeset_priority=medium
	;;
esac



default_layout=''
layout_priority=''
case "$locale" in
    *_AL*)
	default_layout=al
	;;
    ar_*)
	default_layout=ar
	;;
    *_AM*)
	default_layout=am
	;;
    *_AZ*)
	default_layout=az
	;;
    *_BY*)
	default_layout=by
	;;
    *_BE*)
	default_layout=be
	;;
    *_BD*)
	default_layout=ben
	;;
    bs_*)
	default_layout=bs
	;;
    *_BR*)
	default_layout=br
	;;
    *_BG*)
	default_layout=bg
	layout_priority=critical
	;;
    *_CA*)
	default_layout=ca
	;;
    *_HR*)
	default_layout=hr
	;;
    *_CZ*)
	default_layout=cz
	layout_priority=critical
	;;
    *_DK*)
	default_layout=dk
	;;
    *_NL*)
	default_layout=nl
	;;
    *_EE*)
	default_layout=ee
	;;
    fi_FI*)
	default_layout=fi
	;;
    fr_*)
	default_layout=fr
	layout_priority=critical
	;;
    *_GE*)
	default_layout=ge
	layout_priority=critical
	;;
    de_*)
	default_layout=de
	;;
    el_*)
	default_layout=el
	;;
    gu_*)
	default_layout=guj
	;;
    pa_*)
	default_layout=gur
	;;
    hi_*)
	default_layout=dev
	;;
    *_HU*)
	default_layout=hu
	;;
    *_IS*)
	default_layout=is
	;;
    *_IR*)
	default_layout=ir
	;;
    *_IE*)
	default_layout=ie
	;;
    *_IL*)
	layout_priority=critical
	default_layout=il
	;;
    *_IT*)
	default_layout=it
	;;
    *_JP*)
	default_layout=jp
	;;
    kn_*)
	default_layout=kn
	;;
    lo_*)
	default_layout=lo
	;;
    *_AR*|*_BO*|*_CL*|*_CO*|*_CR*|*_DO*|*_EC*|*_GT*|*_HN*|*_MX*|*_NI*|*_PA*|*_PE*|es_PR*|*_PY*|*_SV*|es_US*|*_UY*|*_VE*)
	default_layout=la
	;;
    *_LV*)
	default_layout=lv
	;;
    *_LT*)
	layout_priority=critical
	default_layout=lt
	;;
    *_MK*)
	default_layout=mk
	;;
    ml_*)
	default_layout=ml
	;;
    *_MT*)
	default_layout=mt
	layout_priority=critical
	;;
    *_MN*)
	default_layout=mn
	;;
    se_FI)
	default_layout=se_FI
	;;
    se_NO*)
	default_layout=se_NO
	;;
    se_SE*)
	default_layout=se_SE # TODO: there is also "se" layout
	;;
    no_NO*)
	default_layout=no
	;;
    *_PL*)
	default_layout=pl
	;;
    *_PT*)
	default_layout=pt
	;;
    *_RO*)
	default_layout=ro
	;;
    *_RU*)
	default_layout=ru
	layout_priority=critical
	;;
    sr_*)
	default_layout=sr
	;;
    *_SK*)
	default_layout=sk
	;;
    *_SI*)
	default_layout=si
	;;
    *_ES*)
	default_layout=es
	;;
    *_CH*)
	default_layout=ch
	;;
    *_TJ)
	default_layout=tj
	;;
    ta_*)
	default_layout=tml
	;;
    te_*)
	default_layout=tel
	;;
    *_TH*)
	default_layout=th
	layout_priority=critical
	;;
    *_TR*)
	default_layout=tr
	layout_priority=critical
	;;
    en_US*)
	default_layout=us
	;;
    *_UA*)
	default_layout=ua
	;;
    *_GB)
	default_layout=gb
	;;
    *_VN*)
	default_layout=vn
	;;
    *)
	default_layout=en_US
	;;
esac


# TODO: d-i
charmap=`locale charmap` 
if [ "$locale" = C ]; then
    charmap=UTF-8
    charmap_priority=high
elif echo "$charmaps" | grep "$charmap" >/dev/null; then
    charmap_priority=low
else
    charmap=UTF-8
    charmap_priority=medium
fi

arch=`guess_arch`

case "$arch" in
    i386)
	default_model=pc105
	model_priority=medium
	;;
    sparc)
	default_model=sun4 # also sun5, pc105
	model_priority=critical
	;;
    alpha)
	default_model=pc105
	model_priority=medium
	;;
    arm)
	default_model=pc105
	model_priority=medium
	;;
    arm/riscpc)
	default_model=pc105
	model_priority=medium
	;;
    mips)
	default_model=pc105
	model_priority=medium
	;;
    m68k/atari)
	default_model=ataritt
	model_priority=medium
	;;
    m68k/amiga)
	default_model=amiga
	model_priority=medium
	;;
    m68k/mac)
	default_model=macintosh_old
	model_priority=medium
	;;
    m68k/mvme)
	default_model=pc105
	model_priority=medium
	;;
    m68k/bvme)
	default_model=pc105
	model_priority=medium
	;;
    powerpc/amiga)
	default_model=amiga # apus
	model_priority=medium
	;;
    powerpc/chrp)
	default_model=pc105 # also macintosh_old
	model_priority=critical
	;;
    powerpc/mac)
	default_model=pc105
	model_priority=medium
	;;
    powerpc/prep)
	default_model=pc105
	model_priority=medium
	;;
    amd64)
	default_model=pc105
	model_priority=medium
	;;
    *)
	default_model=pc105
	model_priority=critical
	;;
esac    

STATE=1
old_state=0
while :; do
    starting_state=$STATE
    case "$STATE" in
	1)
	    if \
		ask_debconf console-setup/model $model_priority \
		    model $default_model
	    then
		db_set console-setup/modelcode "$RET"
		STATE=$(($STATE + 1))
	    else
		STATE=$(($STATE - 1))
	    fi
	    ;;
	2)
	    if \
		ask_debconf console-setup/layout critical \
		    layout $default_layout
	    then
		layout="$RET"
		case "$layout" in
		    # TODO: make s.t. to not forget to update this list
		    am|ar|ben|bg|by|dev|el|ge_la|ge_ru|guj|gur|il|il_phonetic|ir|iu|kan|lo|mk|mm|ml|ori|ru|syr|syr_phonetic|tel|th|tj|tml|ua)
			latin=no
			real_layout=us,$layout
			;;
		    sr)
			latin=no
			real_layout=yu,sr
			;;
		    *)
			latin=yes
			real_layout=$layout
			;;
		esac
		db_set console-setup/layoutcode "$real_layout"
		STATE=$(($STATE + 1))
	    else
		STATE=$(($STATE - 1))
	    fi
	    ;;
	3)
	    if \
		ask_debconf console-setup/variant high \
		    "variant\*${layout}" ''
	    then
		if [ "$latin" = yes ]; then
		    db_set console-setup/variantcode "$RET"
		else
		    db_set console-setup/variantcode ",$RET"
		fi
		STATE=$(($STATE + 1))
	    else
		STATE=$(($STATE - 1))
	    fi
	    ;;
	4)
	    if [ "$latin" = yes ]; then
		db_set console-setup/toggle 'No toggling'
		db_set console-setup/switch 'No temporary switch'
	    fi
	    db_beginblock
	    if [ "$latin" = no ]; then
		db_input high console-setup/toggle || true
		db_input medium console-setup/switch || true
	    fi
	    db_input medium console-setup/altgr || true
	    db_input medium console-setup/compose || true
	    db_endblock
	    if db_go; then 
		STATE=$(($STATE + 1))
	    else
		STATE=$(($STATE - 1))
	    fi
	    ;;		    
	5)
	    # add commas
	    choices=`echo "$charmaps" | sed -e 's/$/,/g' | sort `
	    # remove newlines
	    choices=`echo $choices | sed -e 's/,$//' `
	    db_subst console-setup/charmap CHOICES "$choices"
	    db_set console-setup/charmap "$charmap"
	    db_input $charmap_priority console-setup/charmap || true
	    if db_go; then
		STATE=$(($STATE + 1))
	    else
		STATE=$(($STATE - 1))
	    fi
	    db_get console-setup/charmap
	    charmap=$RET
	    ;;
	6)
	    db_set console-setup/codeset "$codeset"
	    db_input $codeset_priority console-setup/codeset || true
	    if db_go; then
		STATE=$(($STATE + 1))
	    else
		STATE=$(($STATE - 1))
	    fi
	    db_get console-setup/codeset
	    codeset=$RET
	    ;;
	7)
	    fontfaces=`available_fontfaces`
	    # add commas
	    choices=`echo "$fontfaces" | sed -e 's/$/,/g'`
	    # remove newlines
	    choices=`echo $choices | sed -e 's/,$//'`
	    db_subst console-setup/fontface CHOICES "$choices"
	    db_input medium console-setup/fontface || true
	    if db_go; then
		STATE=$(($STATE + 1))
	    else
		STATE=$(($STATE - 1))
	    fi
	    db_get console-setup/fontface
	    fontface=$RET
	    ;;
	8)
	    fontsizes=`available_fontsizes`
	    # add commas
	    choices=`echo "$fontsizes" | sed -e 's/$/,/g' `
	    # remove newlines
	    choices=`echo $choices | sed -e 's/,$//'`
	    db_subst console-setup/fontsize CHOICES "$choices"
	    db_input medium console-setup/fontsize || true
	    if db_go; then
		STATE=$(($STATE + 1))
	    else
		STATE=$(($STATE - 1))
	    fi
	    db_get console-setup/fontsize
	    fontsize=$RET
	    ;;
	9)
	    db_input medium console-setup/ttys || true
	    if db_go; then
		STATE=$(($STATE + 1))
	    else
		STATE=$(($STATE - 1))
	    fi
	    db_get console-setup/ttys
	    ttys=$RET
	    ;;
	*)
	    break
	    ;;
    esac
    old_state=$starting_state
done

if [ $STATE -eq 1 ]; then
    exit 10
fi
