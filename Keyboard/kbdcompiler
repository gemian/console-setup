#!/usr/bin/perl

use warnings 'all';
use strict;

BEGIN {
    do "KeyboardNames.pl";
}

my $model = $ARGV[0];
my $dir = 'keymaps';

my $nonlatin = ' am ara ben bg by deva ge gr guj guru il ir iku kan
                 lao mk mm mal ori ru scc syr tel th tj tam ua ';

my %keymaps;

sub warning {
    print STDERR  "WARNING: @_";
}

sub execute {
    if (0) {
	printf STDERR "%s\n", $_[0];
    }
    return system ($_[0]);
}

sub ensuredir {
    if (! -d $_[0]) {
	mkdir $_[0] or die "$0: $_[0]: $!\n";
    }
}

sub read_temp_kmap {
    my $name = $_[0];
    open (KMAP, "$dir/$model-$name") or die  "$0: $dir/$model-$name: $!\n"; 
    while (<KMAP>) {
	if (/^keycode ([0-9]+) =.*/) {
	    $keymaps{$name}[$1] = $_;
	}
    }
    close KMAP;
}

ensuredir $dir;

printf STDERR "Compiling keymaps for %s...\n", $model;

for my $layout (values %KeyboardNames::layouts) {
    next if ($layout eq 'nec/jp');
    next if ($layout eq 'nec_vndr/jp');
    my $actual_layout = (($layout eq 'sr')
			 ? 'yu,sr'
			 : (($nonlatin =~ / $layout /)
			    ? "en_US,$layout"
			    : $layout));
    if (! -f "$dir/$model-$layout") {
	execute ("./ckbcomp -compact -I. -Ickb -rules xorg -model $model"
		 ." -layout $actual_layout >$dir/$model-$layout")
	    and warning "$0: ckbcomp failed\n" if (! -f "$dir/$model-$layout");
    }
    if (-f "$dir/$model-$layout") {
	read_temp_kmap $layout;
    }
    for my $variant (values %{$KeyboardNames::variants{$layout}}) {
	my $actual_variant = (($actual_layout =~ /,/)
			      ? ",$variant"
			      : $variant);
	if (! -f "$dir/$model-$layout:$variant") {
	    execute ("./ckbcomp -compact -I. -Ickb -rules xorg -model $model"
		     ." -layout $actual_layout -variant $actual_variant"
		     ." >$dir/$model-$layout:$variant")
		and warning "$0: ckbcomp failed\n" if (! -f "$dir/$model-$layout:$variant");
	}
	if (-f "$dir/$model-$layout:$variant") {
	    read_temp_kmap "$layout:$variant";
	}
    }
}

sub subtraction {
    my $kmap1 = $keymaps{$_[0]};
    my $kmap2 = $keymaps{$_[1]};
    my $result = 0;
    for my $k (0 .. $#{$kmap1}-1) {
	if (defined $kmap1->[$k]) {
	    if (! defined $kmap2->[$k] || $kmap1->[$k] ne $kmap2->[$k]) {
		$result++;
	    }
	}
    }
    return $result;
}

printf STDERR "Computing differential matrix for %s...\n", $model;

my %kmaps;
my %matrice;
my %reduce;

my $k;
my $k1;
my $k2;

for $k (keys %keymaps) {
    $kmaps{$k} = 1;
}

for $k1 (keys %kmaps) {
    for $k2 (keys %kmaps) {
	$matrice{$k1}{$k2} = subtraction($k1, $k2);
    }
}

printf STDERR "Reducing the keymaps for %s...\n", $model;

while (keys %kmaps) {
    my $mink1 = '';
    my $mink2 = '';
    my $minsub = 10000000;
    for $k1 (keys %kmaps, '') {
	for $k2 (keys %kmaps) {
	    next if ($k1 eq $k2);
	    if ($k1 eq '') {
		if ($mink1 eq '') {
		    $mink1 = $k2;
		}
	    } elsif ($matrice{$k1}{$k2} < $minsub) {
		$mink1 = $k1;
		$mink2 = $k2;
		$minsub = $matrice{$k1}{$k2};
	    }
	}
    }
    $reduce{$mink1} = $mink2;
    delete $kmaps{$mink1};
}

printf STDERR "Dumping the encoded keymaps for %s...\n", $model;

for $k1 (keys %reduce) {
    my $kmap1 = $keymaps{$k1};
    $k2 = $reduce{$k1};
    if ($k2 ne '') {
	my $kmap2 = $keymaps{$k2};
	printf "%s::#include %s\n", $k1, $k2;
	for my $k (0 .. $#{$kmap1}-1) {
	    if (defined $kmap1->[$k]) {
		if (! defined $kmap2->[$k] || $kmap1->[$k] ne $kmap2->[$k]) {
		    printf "%s::%s", $k1, $kmap1->[$k];
		}
	    }
	}
    } else {
	for my $k (0 .. $#{$kmap1}-1) {
	    if (defined $kmap1->[$k]) {
		printf "%s::%s", $k1, $kmap1->[$k];
	    }
	}
    }
}
